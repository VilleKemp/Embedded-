
sensorhelmet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9d  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000852  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055c  00000000  00000000  00001643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fb  00000000  00000000  00002143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_7>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 30       	cpi	r26, 0x03	; 3
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  9c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <init>:
char bluetooth_receive(){
	char ReceivedByte;
	while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
		ReceivedByte = UDR0; // Fetch the recieved byte value into the variable "ByteReceived"
	return ReceivedByte;
}
  a4:	11 b8       	out	0x01, r1	; 1
  a6:	83 eb       	ldi	r24, 0xB3	; 179
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	83 ed       	ldi	r24, 0xD3	; 211
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	81 ef       	ldi	r24, 0xF1	; 241
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	85 bf       	out	0x35, r24	; 53
  ba:	85 bf       	out	0x35, r24	; 53
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 66       	ori	r24, 0x60	; 96
  c4:	80 83       	st	Z, r24
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	87 68       	ori	r24, 0x87	; 135
  ce:	80 83       	st	Z, r24
  d0:	8c b5       	in	r24, 0x2c	; 44
  d2:	80 65       	ori	r24, 0x50	; 80
  d4:	8c bd       	out	0x2c, r24	; 44
  d6:	e1 ec       	ldi	r30, 0xC1	; 193
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 61       	ori	r24, 0x18	; 24
  de:	80 83       	st	Z, r24
  e0:	e2 ec       	ldi	r30, 0xC2	; 194
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	86 60       	ori	r24, 0x06	; 6
  e8:	80 83       	st	Z, r24
  ea:	83 e3       	ldi	r24, 0x33	; 51
  ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f4:	81 ec       	ldi	r24, 0xC1	; 193
  f6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 106:	08 95       	ret

00000108 <blue_led_on>:
 108:	5d 98       	cbi	0x0b, 5	; 11
 10a:	5c 98       	cbi	0x0b, 4	; 11
 10c:	5e 9a       	sbi	0x0b, 6	; 11
 10e:	08 95       	ret

00000110 <led_off>:
 110:	5d 98       	cbi	0x0b, 5	; 11
 112:	5c 98       	cbi	0x0b, 4	; 11
 114:	5e 98       	cbi	0x0b, 6	; 11
 116:	08 95       	ret

00000118 <blink>:
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	84 e3       	ldi	r24, 0x34	; 52
 11c:	9c e0       	ldi	r25, 0x0C	; 12
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <blink+0x6>
 126:	00 c0       	rjmp	.+0      	; 0x128 <blink+0x10>
 128:	00 00       	nop
 12a:	0e 94 84 00 	call	0x108	; 0x108 <blue_led_on>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	84 e3       	ldi	r24, 0x34	; 52
 132:	9c e0       	ldi	r25, 0x0C	; 12
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <blink+0x1c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <blink+0x26>
 13e:	00 00       	nop
 140:	0e 94 88 00 	call	0x110	; 0x110 <led_off>
 144:	08 95       	ret

00000146 <bluetooth_transmit>:
 146:	e0 ec       	ldi	r30, 0xC0	; 192
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	90 81       	ld	r25, Z
 14c:	95 ff       	sbrs	r25, 5
 14e:	fd cf       	rjmp	.-6      	; 0x14a <bluetooth_transmit+0x4>
 150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 154:	08 95       	ret

00000156 <__vector_7>:

/*Interrupts*/
//Sync button interrupt
ISR(PCINT3_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
	newIntFlag = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <main>:


int main(void)
{
init();
 174:	0e 94 52 00 	call	0xa4	; 0xa4 <init>
sei();
 178:	78 94       	sei
ReceivedByte = bluetooth_receive();
bluetooth_transmit(ReceivedByte);
	*/
//test code for adc
		for(channel=0;channel<channels;channel++){
        ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));//all muxes to 0
 17a:	0c e7       	ldi	r16, 0x7C	; 124
 17c:	10 e0       	ldi	r17, 0x00	; 0
        ADMUX |= channel;
	  // Start the conversion.
        ADCSRA |= (1<<ADSC);
 17e:	ca e7       	ldi	r28, 0x7A	; 122
 180:	d0 e0       	ldi	r29, 0x00	; 0
        // Wait for the result, then read it.

        
		while(ADCSRA & (1<<ADSC));
       // result =ADC;
		low=ADCL;
 182:	0f 2e       	mov	r0, r31
 184:	f8 e7       	ldi	r31, 0x78	; 120
 186:	cf 2e       	mov	r12, r31
 188:	d1 2c       	mov	r13, r1
 18a:	f0 2d       	mov	r31, r0
		high=ADCH;
 18c:	0f 2e       	mov	r0, r31
 18e:	f9 e7       	ldi	r31, 0x79	; 121
 190:	ef 2e       	mov	r14, r31
 192:	f1 2c       	mov	r15, r1
 194:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		}
		*/
		
		
		if (newIntFlag)
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19a:	88 23       	and	r24, r24
 19c:	e1 f0       	breq	.+56     	; 0x1d6 <main+0x62>
		{
			blink();
 19e:	0e 94 8c 00 	call	0x118	; 0x118 <blink>
			newIntFlag = 0;
 1a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <main+0x62>
        ADCSRA |= (1<<ADSC);

        // Wait for the result, then read it.

        
		while(ADCSRA & (1<<ADSC));
 1a8:	88 81       	ld	r24, Y
 1aa:	86 fd       	sbrc	r24, 6
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <main+0x34>
       // result =ADC;
		low=ADCL;
 1ae:	f6 01       	movw	r30, r12
 1b0:	80 81       	ld	r24, Z
 1b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <low>
		high=ADCH;
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <high>
		
		bluetooth_transmit(channel);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 a3 00 	call	0x146	; 0x146 <bluetooth_transmit>
		bluetooth_transmit(high);
 1c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <high>
 1c8:	0e 94 a3 00 	call	0x146	; 0x146 <bluetooth_transmit>
		bluetooth_transmit(low);
 1cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <low>
 1d0:	0e 94 a3 00 	call	0x146	; 0x146 <bluetooth_transmit>
 1d4:	e0 cf       	rjmp	.-64     	; 0x196 <main+0x22>
ReceivedByte = bluetooth_receive();
bluetooth_transmit(ReceivedByte);
	*/
//test code for adc
		for(channel=0;channel<channels;channel++){
        ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));//all muxes to 0
 1d6:	f8 01       	movw	r30, r16
 1d8:	80 81       	ld	r24, Z
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	80 83       	st	Z, r24
        ADMUX |= channel;
 1de:	80 81       	ld	r24, Z
 1e0:	80 83       	st	Z, r24
	  // Start the conversion.
        ADCSRA |= (1<<ADSC);
 1e2:	88 81       	ld	r24, Y
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	88 83       	st	Y, r24

        // Wait for the result, then read it.

        
		while(ADCSRA & (1<<ADSC));
 1e8:	df cf       	rjmp	.-66     	; 0x1a8 <main+0x34>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
