
sensorhelmet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa9  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000868  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000225  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000023c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_7>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a8 30       	cpi	r26, 0x08	; 8
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  9c:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <init>:
char bluetooth_receive(){
	char ReceivedByte;
	while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
		ReceivedByte = UDR0; // Fetch the recieved byte value into the variable "ByteReceived"
	return ReceivedByte;
}
  a4:	11 b8       	out	0x01, r1	; 1
  a6:	83 eb       	ldi	r24, 0xB3	; 179
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	83 ed       	ldi	r24, 0xD3	; 211
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	81 ef       	ldi	r24, 0xF1	; 241
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	85 bf       	out	0x35, r24	; 53
  ba:	85 bf       	out	0x35, r24	; 53
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 66       	ori	r24, 0x60	; 96
  c4:	80 83       	st	Z, r24
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	87 68       	ori	r24, 0x87	; 135
  ce:	80 83       	st	Z, r24
  d0:	8c b5       	in	r24, 0x2c	; 44
  d2:	80 65       	ori	r24, 0x50	; 80
  d4:	8c bd       	out	0x2c, r24	; 44
  d6:	e1 ec       	ldi	r30, 0xC1	; 193
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 61       	ori	r24, 0x18	; 24
  de:	80 83       	st	Z, r24
  e0:	e2 ec       	ldi	r30, 0xC2	; 194
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	86 60       	ori	r24, 0x06	; 6
  e8:	80 83       	st	Z, r24
  ea:	83 e3       	ldi	r24, 0x33	; 51
  ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f4:	81 ec       	ldi	r24, 0xC1	; 193
  f6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 106:	08 95       	ret

00000108 <read_sensors>:
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	80 83       	st	Z, r24
 11a:	c1 e0       	ldi	r28, 0x01	; 1
 11c:	d1 e0       	ldi	r29, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0c e7       	ldi	r16, 0x7C	; 124
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	49 e7       	ldi	r20, 0x79	; 121
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	28 e7       	ldi	r18, 0x78	; 120
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	d8 01       	movw	r26, r16
 132:	8c 91       	ld	r24, X
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	8c 93       	st	X, r24
 138:	8c 91       	ld	r24, X
 13a:	89 2b       	or	r24, r25
 13c:	8c 93       	st	X, r24
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
 144:	80 81       	ld	r24, Z
 146:	86 fd       	sbrc	r24, 6
 148:	fd cf       	rjmp	.-6      	; 0x144 <read_sensors+0x3c>
 14a:	da 01       	movw	r26, r20
 14c:	8c 91       	ld	r24, X
 14e:	be 01       	movw	r22, r28
 150:	61 50       	subi	r22, 0x01	; 1
 152:	71 09       	sbc	r23, r1
 154:	db 01       	movw	r26, r22
 156:	8c 93       	st	X, r24
 158:	d9 01       	movw	r26, r18
 15a:	8c 91       	ld	r24, X
 15c:	88 83       	st	Y, r24
 15e:	9f 5f       	subi	r25, 0xFF	; 255
 160:	22 96       	adiw	r28, 0x02	; 2
 162:	94 30       	cpi	r25, 0x04	; 4
 164:	29 f7       	brne	.-54     	; 0x130 <read_sensors+0x28>
 166:	ec e7       	ldi	r30, 0x7C	; 124
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	80 83       	st	Z, r24
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <blue_led_on>:
 17e:	5d 98       	cbi	0x0b, 5	; 11
 180:	5c 98       	cbi	0x0b, 4	; 11
 182:	5e 9a       	sbi	0x0b, 6	; 11
 184:	08 95       	ret

00000186 <led_off>:
 186:	5d 98       	cbi	0x0b, 5	; 11
 188:	5c 98       	cbi	0x0b, 4	; 11
 18a:	5e 98       	cbi	0x0b, 6	; 11
 18c:	08 95       	ret

0000018e <blink>:
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	84 e3       	ldi	r24, 0x34	; 52
 192:	9c e0       	ldi	r25, 0x0C	; 12
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <blink+0x6>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <blink+0x10>
 19e:	00 00       	nop
 1a0:	0e 94 bf 00 	call	0x17e	; 0x17e <blue_led_on>
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	84 e3       	ldi	r24, 0x34	; 52
 1a8:	9c e0       	ldi	r25, 0x0C	; 12
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <blink+0x1c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <blink+0x26>
 1b4:	00 00       	nop
 1b6:	0e 94 c3 00 	call	0x186	; 0x186 <led_off>
 1ba:	08 95       	ret

000001bc <bluetooth_transmit>:
 1bc:	e0 ec       	ldi	r30, 0xC0	; 192
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	95 ff       	sbrs	r25, 5
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <bluetooth_transmit+0x4>
 1c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ca:	08 95       	ret

000001cc <__vector_7>:

/*Interrupts*/
//Sync button interrupt
ISR(PCINT3_vect){
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
blink();
 1ee:	0e 94 c7 00 	call	0x18e	; 0x18e <blink>
blink();
 1f2:	0e 94 c7 00 	call	0x18e	; 0x18e <blink>
blink();
 1f6:	0e 94 c7 00 	call	0x18e	; 0x18e <blink>
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <main>:


int main(void)
{
sei();
 21c:	78 94       	sei
init();
 21e:	0e 94 52 00 	call	0xa4	; 0xa4 <init>
char *adc_results;

    while (1) 
    {
		//read sensor result
		adc_results=read_sensors();
 222:	0e 94 84 00 	call	0x108	; 0x108 <read_sensors>
 226:	ec 01       	movw	r28, r24
 228:	21 96       	adiw	r28, 0x01	; 1
 22a:	8c 01       	movw	r16, r24
 22c:	07 5f       	subi	r16, 0xF7	; 247
 22e:	1f 4f       	sbci	r17, 0xFF	; 255
 230:	fe 01       	movw	r30, r28
 232:	31 97       	sbiw	r30, 0x01	; 1
		for(int i=0;i<channels*2;i=i+2){
		bluetooth_transmit(*(adc_results+i));
 234:	80 81       	ld	r24, Z
 236:	0e 94 de 00 	call	0x1bc	; 0x1bc <bluetooth_transmit>
		bluetooth_transmit(*(adc_results+i+1));
 23a:	88 81       	ld	r24, Y
 23c:	0e 94 de 00 	call	0x1bc	; 0x1bc <bluetooth_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	89 e6       	ldi	r24, 0x69	; 105
 244:	98 e1       	ldi	r25, 0x18	; 24
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x2a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x34>
 250:	00 00       	nop
 252:	22 96       	adiw	r28, 0x02	; 2

    while (1) 
    {
		//read sensor result
		adc_results=read_sensors();
		for(int i=0;i<channels*2;i=i+2){
 254:	c0 17       	cp	r28, r16
 256:	d1 07       	cpc	r29, r17
 258:	59 f7       	brne	.-42     	; 0x230 <main+0x14>
		bluetooth_transmit(*(adc_results+i));
		bluetooth_transmit(*(adc_results+i+1));
		_delay_ms(1000);
		}
		
		blink();
 25a:	0e 94 c7 00 	call	0x18e	; 0x18e <blink>
		bluetooth_transmit(low);
		bluetooth_transmit(high);
		//bluetooth_transmit(result);
		_delay_ms(1000);
		result=0;*/
    }
 25e:	e1 cf       	rjmp	.-62     	; 0x222 <main+0x6>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
