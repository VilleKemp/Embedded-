
sensorhelmet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094f  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000808  00000000  00000000  00000bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f4  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000091  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  9c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <init>:
        // Wait for the result, then read it.
        while(ADCSRA & (1<<ADSC));
        adc_result[channel] =ADC;
		
}
}
  a4:	11 b8       	out	0x01, r1	; 1
  a6:	83 eb       	ldi	r24, 0xB3	; 179
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	83 ed       	ldi	r24, 0xD3	; 211
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	81 ef       	ldi	r24, 0xF1	; 241
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	85 bf       	out	0x35, r24	; 53
  ba:	85 bf       	out	0x35, r24	; 53
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 83       	st	Z, r24
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	87 68       	ori	r24, 0x87	; 135
  cc:	80 83       	st	Z, r24
  ce:	8c b5       	in	r24, 0x2c	; 44
  d0:	80 65       	ori	r24, 0x50	; 80
  d2:	8c bd       	out	0x2c, r24	; 44
  d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  de:	88 ed       	ldi	r24, 0xD8	; 216
  e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ea:	08 95       	ret

000000ec <led_on>:
	
//}

 void led_on(){
	 
	PORTD &= ~(1 << PIND5); // Pin 5 goes low
  ec:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1 << PIND4); // Pin 4 goes low
  ee:	5c 98       	cbi	0x0b, 4	; 11
	PORTD |= (1 << PIND6); // Pin 6 goes high	 
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	08 95       	ret

000000f4 <led_off>:

 }
 void led_off(){
	 
	PORTD &= ~(1 << PIND5); // Pin 5 goes low
  f4:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1 << PIND4); // Pin 4 goes low
  f6:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1 << PIND6); // Pin 6 goes low
  f8:	5e 98       	cbi	0x0b, 6	; 11
  fa:	08 95       	ret

000000fc <blink>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f e9       	ldi	r18, 0x9F	; 159
  fe:	86 e8       	ldi	r24, 0x86	; 134
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <blink+0x6>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <blink+0x10>
 10c:	00 00       	nop

 }

void blink(){
		_delay_ms(500);
	led_on();
 10e:	0e 94 76 00 	call	0xec	; 0xec <led_on>
 112:	2f e9       	ldi	r18, 0x9F	; 159
 114:	86 e8       	ldi	r24, 0x86	; 134
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <blink+0x1c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <blink+0x26>
 122:	00 00       	nop
	_delay_ms(500);
	led_off();
 124:	0e 94 7a 00 	call	0xf4	; 0xf4 <led_off>
 128:	08 95       	ret

0000012a <bluetooth_transmit>:
	
}

void bluetooth_transmit(uint8_t data){
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24

 /* Wait for empty transmit buffer */
 while ( !( UCSR0A & (1<<UDRE0)) )
 12e:	e0 ec       	ldi	r30, 0xC0	; 192
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	95 ff       	sbrs	r25, 5
 136:	fd cf       	rjmp	.-6      	; 0x132 <bluetooth_transmit+0x8>
 ;
 /* Put data into buffer, sends the data */
 blink();
 138:	0e 94 7e 00 	call	0xfc	; 0xfc <blink>
 UDR0 = data;
 13c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
blink();
 140:	0e 94 7e 00 	call	0xfc	; 0xfc <blink>

}
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <main>:
	data = 0;
}
*/
int main(void)
{
sei();
 148:	78 94       	sei
init();
 14a:	0e 94 52 00 	call	0xa4	; 0xa4 <init>
    {
		
	//	readSensors();
	
	//led();
	bluetooth_transmit(data);
 14e:	8f e6       	ldi	r24, 0x6F	; 111
 150:	0e 94 95 00 	call	0x12a	; 0x12a <bluetooth_transmit>
	
	blink();
 154:	0e 94 7e 00 	call	0xfc	; 0xfc <blink>
    }
 158:	fa cf       	rjmp	.-12     	; 0x14e <main+0x6>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
